generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["views", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  STAFF
  STUDENT
}

enum ACTION_STATUS {
  SENT
  IN_PROGRESS
  COMPLETED
}

enum QUARTER_MONTHS {
  JAN_MAR
  APR_JUN
  JUL_SEP
  OCT_DEC
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  dob            Int?
  phone_number   String?
  gender         String?
  role           Roles    @default(STUDENT)
  image          String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sessions    Session[]
  RoomCheck   RoomCheck[]
  Savings     Savings[]
  ActionPlan  ActionPlan[]
  SupportPlan SupportPlan[]
  Health      Health[]
  Rewards     Rewards[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RoomCheck {
  id                    String   @id @default(cuid())
  staff_id              String?
  student_id            String?
  staff_name            String?
  purpose               String?
  observation           String?
  thoughts_and_feelings String?
  maintenance_issues    String?
  user                  User?    @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Savings {
  id             String   @id @default(cuid())
  staff_id       String?
  staff_name     String? //Staff name
  student_id     String?
  student_name   String?
  student_email  String?
  deposited_by   String? //Depositor name
  recieved_by    String? //Staff name
  deposit_amount Float?
  balance        Float?
  user           User?    @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ActionPlan {
  id                     String         @id @default(cuid())
  staff_id               String?
  staff_name             String? //Staff name
  student_id             String?
  student_email          String?
  key_need               String?
  action_to_be_completed String?
  success_metrics        String?
  due_date               Int?
  assigned_to            String?
  review                 String?
  start_date             Int?
  status                 ACTION_STATUS?
  user                   User?          @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model SupportPlan {
  id                           String          @id @default(cuid())
  staff_id                     String?
  student_id                   String?
  student_email                String?
  strengths                    String?
  area_of_development          String?
  current_strategy_and_support String?
  month                        QUARTER_MONTHS?
  year                         Int?
  user                         User?           @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
}

model Health {
  id                 String   @id @default(cuid())
  staff_id           String?
  staff_name         String?
  student_id         String?
  student_email      String?
  health_issue       String?
  appointment        Boolean?
  feedback           String?
  medication         Boolean?
  name_of_medication Boolean?
  from_duration      Int?
  to_duration        Int?
  follow_up_date     Int?
  evidence           Boolean?
  user               User?    @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Rewards {
  id            String   @id @default(cuid())
  staff_id      String?
  staff_name    String?
  student_id    String?
  student_email String?
  type          String?
  reason        String?
  points        Int?
  reflection    String?
  notes         String?
  level         Int?
  user          User?    @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
