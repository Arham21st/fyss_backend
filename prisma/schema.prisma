generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["views", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  STAFF
  STUDENT
}

enum ACTION_STATUS {
  SENT
  IN_PROGRESS
  COMPLETED
}

enum QUARTER_MONTHS {
  JAN_MAR
  APR_JUN
  JUL_SEP
  OCT_DEC
}

enum REWARD_TYPES {
  REWARD
  INCENTIVE
  SANCTION
}

enum REWARD_KEYS {
  THERAPY_SESSION
  HOMEWORK_COMPLETION
  GROUP_ACTIVITY_PARTICIPATION
  ONTIME_ATTENDACE
}

enum SAVINGS_TYPE {
  DEPOSITOR
  WITHDRAWL
}

enum ROOM_CHECK_FEEDBACK {
  CLEANLINESS
  BED_MADE
  ORGANIZATION
  GARBAGE_DISPOSED
}

enum REWARD_TIERS {
  BRONZE
  SILVER
  GOLD
}

enum SHIFT {
  EARLY
  LATE
  NIGHT
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  title          String?
  dob            Int?
  phone_number   String?
  gender         String?
  role           Roles    @default(STUDENT)
  image          String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sessions               Session[]
  RoomCheck              RoomCheck[]
  Savings                Savings[]
  ActionPlan             ActionPlan[]
  SupportPlan            SupportPlan[]
  Health                 Health[]
  Rewards                Rewards[]
  StudentRewardsProgress StudentRewardsProgress?
  Properties             Properties[]

  @@unique([id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RoomCheck {
  id                    String                @id @default(cuid())
  staff_id              String?
  student_id            String?
  staff_name            String
  purpose               String
  observation           String
  thoughts_and_feelings String
  maintenance_issues    String
  feedback              ROOM_CHECK_FEEDBACK[]
  user                  User?                 @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model Savings {
  id             String   @id @default(cuid())
  staff_id       String?
  staff_name     String? //Staff name
  student_id     String?
  student_name   String?
  student_email  String?
  depositer_name String? //Depositor name
  withdrawl_name String? //WithDrawl name
  recieved_by    String? // reciever/staff name
  amount         Float?
  balance        Float?   @default(0)
  user           User?    @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ActionPlan {
  id                     String         @id @default(cuid())
  staff_id               String?
  staff_name             String? //Staff name
  student_id             String?
  student_email          String?
  key_need               String?
  action_to_be_completed String?
  success_metrics        String?
  due_date               Int?
  assigned_to            String?
  review                 String?
  start_date             Int?
  status                 ACTION_STATUS?
  user                   User?          @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model SupportPlan {
  id                           String          @id @default(cuid())
  staff_id                     String?
  student_id                   String?
  student_email                String?
  strengths                    String?
  area_of_development          String?
  current_strategy_and_support String?
  month                        QUARTER_MONTHS?
  year                         Int?
  user                         User?           @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
}

model Health {
  id                 String   @id @default(cuid())
  staff_id           String?
  staff_name         String?
  student_id         String?
  student_email      String?
  health_issue       String?
  appointment        Boolean?
  feedback           String?
  medication         Boolean?
  name_of_medication String?
  from_duration      Int?
  to_duration        Int?
  follow_up_date     Int?
  evidence           Boolean?
  user               User?    @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Rewards {
  id            String       @id @default(cuid())
  staff_id      String?
  staff_name    String?
  student_id    String?
  student_email String?
  type          REWARD_TYPES
  reward_key    REWARD_KEYS
  reason        String?
  points        Int?         @default(0)
  reflection    String?
  notes         String?
  user          User?        @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model RewardScoring {
  id        String      @id @default(cuid())
  name      REWARD_KEYS
  value     Int
  createdAt DateTime    @default(now())
  updatedAT DateTime    @updatedAt
}

model StudentRewardsProgress {
  id             String   @id @default(cuid())
  student_id     String   @unique
  current_points Int      @default(0)
  total_points   Int?     @default(0)
  current_level  Int      @default(0)
  points_to_next Int      @default(500)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student User? @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Properties {
  id            String          @id @default(cuid())
  name          String
  location      String
  occupancy     Int
  image         String?
  description   String?
  staff_id      String
  staff         User?           @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ShiftTracker  ShiftTracker[]
  TrainingDates TrainingDates[]
}

model ShiftTracker {
  id              String      @id @default(cuid())
  from            String
  to              String
  shift           SHIFT
  verbal_handover Boolean
  property_id     String?
  property        Properties? @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model TrainingDates {
  id          String      @id @default(cuid())
  topic       String
  summary     String
  notes       String?
  from        String
  to          String
  property_id String?
  property    Properties? @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
